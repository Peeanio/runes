AWSTemplateFormatVersion: '2010-09-09'
Description: 'runes serverless stack'
Resources: 
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: "runes_api_lambda"
      Handler: runes_api_lambda.lambda_handler
      Runtime: python3.9
      Code:
        S3Bucket: runes-app-lambda
        S3Key: 'runes_api_lambda.zip'
      Description: "get rune data from dynamodb"
      MemorySize: 128
      Timeout: 100
      Role: !GetAtt LambdaRole.Arn
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      #ManagedPolicyArns:
      #- arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  LambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: runes-lambda-policy
      Roles:
      - Ref: "LambdaRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - 
         Action:
          - "dynamodb:*"
         Effect: Allow
         Resource: "*"
  DynamoDbRuneTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "runeId"
          AttributeType: "N" 
      KeySchema: 
        - 
         AttributeName: "runeId"
         KeyType: "HASH"
      TableName: "rune_table"

#  PermissionForApiGatewayToInvokeLambda:
#    Type: AWS::Lambda::Permission
#    Properties:
#      FunctionName: !Ref "LambdaFunction"
#      Action: "lambda:InvokeFunction"
#      Principal:
#      SourceArn:
#       Fn::GetAtt:
#         - "ApiGateway"
#         - "Arn"
  ApiGateway:
   Type: "AWS::ApiGatewayV2::Api"
   Properties:
     Name: runes
     Description: REST api for runes application
     ProtocolType: HTTP
     CorsConfiguration: 
       AllowOrigins:
         - '*'
  ApiGatewayIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: '2.0'
      IntegrationMethod: 'POST'
      IntegrationUri: !Join
      - ''
      - - 'arn:'
        - !Ref 'AWS::Partition'
        - ':apigateway:'
        - !Ref 'AWS::Region'
        - ':lambda:path/2015-03-31/functions/'
        - !GetAtt LambdaFunction.Arn
        - /invocations 
  ApiGatewayRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /api/v1/rune'
      Target: !Join
      - /
      - - integrations
        - !Ref ApiGatewayIntegration
